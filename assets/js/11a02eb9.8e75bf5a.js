"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[3945],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),g=i,d=m["".concat(u,".").concat(g)]||m[g]||p[g]||a;return t?r.createElement(d,o(o({ref:n},s),{},{components:t})):r.createElement(d,o({ref:n},s))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3968:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={slug:"minikube",title:"Minikube",authors:["gnuion"],tags:["angular"]},o=void 0,l={permalink:"/docion/blog/minikube",editUrl:"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-28-minikube/index.mdx",source:"@site/blog/2022-10-28-minikube/index.mdx",title:"Minikube",description:"Kubernetes is a enterprise application and is designed to run across multiple machines. Each machine is called a node.",date:"2022-10-28T00:00:00.000Z",formattedDate:"October 28, 2022",tags:[{label:"angular",permalink:"/docion/blog/tags/angular"}],readingTime:.8,hasTruncateMarker:!0,authors:[{name:"Jon Zuka",title:"Blog owner",url:"https://github.com/gnuion",imageURL:"https://github.com/gnuion.png",key:"gnuion"}],frontMatter:{slug:"minikube",title:"Minikube",authors:["gnuion"],tags:["angular"]},prevItem:{title:"Kubernetes Nginx Ingress",permalink:"/docion/blog/k8s-nginx-ingress"},nextItem:{title:"Angular in Docker",permalink:"/docion/blog/angular-in-docker"}},u={authorsImageUrls:[void 0]},c=[{value:"Setting up a learning environment",id:"setting-up-a-learning-environment",level:2},{value:"Interact with your cluster",id:"interact-with-your-cluster",level:2}],s={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Kubernetes is a enterprise application and is designed to run across multiple machines. Each machine is called a node. "),(0,i.kt)("h2",{id:"setting-up-a-learning-environment"},"Setting up a learning environment"),(0,i.kt)("p",null,"When learning, we might have only one machine available. In that case we can create a single node setup using ",(0,i.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"minikube"),". Here we assume we already know basics of docker. Continue buy installing minikube following the documentation for your specific OS. In ArchLinux type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo pacman -Sy minikube\n")),(0,i.kt)("p",null,"To start a single node cluster run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"minikube start\n")),(0,i.kt)("p",null,"Select docker as the execution engine. VMs are also an option, but consume more resources. You can check the newly created cluster using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"minikube status\n")),(0,i.kt)("p",null,"To stop the cluster run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"minikube stop\n")),(0,i.kt)("p",null,"Visit the ",(0,i.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"documentation")," for more minikube commands."),(0,i.kt)("h2",{id:"interact-with-your-cluster"},"Interact with your cluster"),(0,i.kt)("p",null,"If you already have kubectl installed, you can now use it to access your shiny new cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"kubectl get po -A\n")))}p.isMDXComponent=!0}}]);