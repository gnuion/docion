"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[3811],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,k=u["".concat(o,".").concat(m)]||u[m]||d[m]||l;return t?a.createElement(k,i(i({ref:n},c),{},{components:t})):a.createElement(k,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9853:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={slug:"kubernetes-basics",title:"Kubernetes Basics",authors:["gnuion"],tags:["angular"]},i=void 0,p={permalink:"/docion/blog/kubernetes-basics",editUrl:"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-29-kubernetes-basics/index.mdx",source:"@site/blog/2022-10-29-kubernetes-basics/index.mdx",title:"Kubernetes Basics",description:"In this blog we explore some basic concepts of kubernetes. It is helpful to have template files.",date:"2022-10-29T00:00:00.000Z",formattedDate:"October 29, 2022",tags:[{label:"angular",permalink:"/docion/blog/tags/angular"}],readingTime:3.075,hasTruncateMarker:!0,authors:[{name:"Jon Zuka",title:"Blog owner",url:"https://github.com/gnuion",imageURL:"https://github.com/gnuion.png",key:"gnuion"}],frontMatter:{slug:"kubernetes-basics",title:"Kubernetes Basics",authors:["gnuion"],tags:["angular"]},prevItem:{title:"Kubernetes Nginx Ingress",permalink:"/docion/blog/k8s-nginx-ingress"},nextItem:{title:"Minikube",permalink:"/docion/blog/minikube"}},o={authorsImageUrls:[void 0]},s=[{value:"YAML in Kubernetes",id:"yaml-in-kubernetes",level:2},{value:"Pod commands",id:"pod-commands",level:2},{value:"CRI-O",id:"cri-o",level:2},{value:"Replica Controller (deprecated)",id:"replica-controller-deprecated",level:2},{value:"Replica Set",id:"replica-set",level:2},{value:"Deployments",id:"deployments",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Resource Quota",id:"resource-quota",level:2},{value:"Services",id:"services",level:2},{value:"Binding",id:"binding",level:2}],c={toc:s};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this blog we explore some basic concepts of kubernetes. It is helpful to have template files."),(0,r.kt)("h2",{id:"yaml-in-kubernetes"},"YAML in Kubernetes"),(0,r.kt)("p",null,"A simple ",(0,r.kt)("inlineCode",{parentName:"p"},"pod-definition.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\n    type: front-end\n    (any other key value pair)\nspec:\n  containers:\n    - name: nginx-container\n      image: docker.io/nginx\n")),(0,r.kt)("h2",{id:"pod-commands"},"Pod commands"),(0,r.kt)("p",null,"The following will create the pod:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl create -f pod-definition.yml")),(0,r.kt)("p",null,"To see pods use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get pods\n")),(0,r.kt)("p",null,"To view detailed information about ",(0,r.kt)("inlineCode",{parentName:"p"},"my-app-pod"),' use"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl describe pod myapp-pod\n")),(0,r.kt)("h2",{id:"cri-o"},"CRI-O"),(0,r.kt)("p",null,"If using crio, you can see your running containers using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"crictl ps\n")),(0,r.kt)("h2",{id:"replica-controller-deprecated"},"Replica Controller (deprecated)"),(0,r.kt)("p",null,"A simple ",(0,r.kt)("inlineCode",{parentName:"p"},"rc-definition.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: myapp-rc\n  labels:\n    app: myapp\n    type: front-end\nspec:\n  template:\n    metadata:\n      name: myapp-pod\n      labels:\n        app: myapp\n        type: front-end\n    spec:\n      containers:\n        - name: nginx-container\n          image: docker.io/nginx\n  replicas: 3\n")),(0,r.kt)("p",null,"Note that the template is just the pod definition we created previously."),(0,r.kt)("p",null,"The following will create the ReplicationController:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl create -f rc-definition.yml")),(0,r.kt)("p",null,"To see pods use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get rc\n")),(0,r.kt)("h2",{id:"replica-set"},"Replica Set"),(0,r.kt)("p",null,"A simple ",(0,r.kt)("inlineCode",{parentName:"p"},"replicaset-definition.yml")," file. Node the ",(0,r.kt)("strong",{parentName:"p"},"apiVersion")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: myapp-replicaset\n  labels:\n    app: myapp\n    type: front-end\nspec:\n  template:\n    metadata:\n      name: myapp-pod\n      labels:\n        app: myapp\n        type: front-end\n    spec:\n      containers:\n        - name: nginx-container\n          image: docker.io/nginx\n  replicas: 3\n  selector:\n    matchLabels:\n      type: front-end\n")),(0,r.kt)("p",null,"The key difference is the selector key, which takes other pods into consideration. If skipped, the value is assumed to be the same as the labels."),(0,r.kt)("p",null,"To replace a ReplicaSet with a new definition, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl replace -f replicaset-definition.yml\n")),(0,r.kt)("p",null,"To scale replicas use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl scale --replicas=6 -f replicaset-definition.yml\n")),(0,r.kt)("h2",{id:"deployments"},"Deployments"),(0,r.kt)("p",null,"The content of the Deployment definition file is similar to the ReplicaSet definition file, except for the ",(0,r.kt)("strong",{parentName:"p"},"kind"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To see all created objects at once, run:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"kubectl get all\n"))),(0,r.kt)("h2",{id:"namespaces"},"Namespaces"),(0,r.kt)("p",null,"So far, we have been working inside the ",(0,r.kt)("strong",{parentName:"p"},"default")," namespace."),(0,r.kt)("p",null,"A simple ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace-dev.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: dev\n")),(0,r.kt)("p",null,"To create the namespace run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl create -f namespace-dev.yml\n")),(0,r.kt)("p",null,"Alternative, you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl create namespace dev\n")),(0,r.kt)("p",null,"To switch to the dev namespace run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl config set-context $(kubectl config current-context) --namespace=dev\n")),(0,r.kt)("p",null,"To view pods in all namespaces, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get pods --all-namespaces\n")),(0,r.kt)("h2",{id:"resource-quota"},"Resource Quota"),(0,r.kt)("p",null,"A simple ",(0,r.kt)("inlineCode",{parentName:"p"},"resource-quota.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: resource-quota\n  namespace: dev\nspec:\n  hard:\n    pods: "10"\n    requests.cpu: "4"\n    requests.memory: 5Gi\n    limits.cpu: "10"\n    limits.memory: 10Gi\n')),(0,r.kt)("h2",{id:"services"},"Services"),(0,r.kt)("p",null,"A simple NodePort ",(0,r.kt)("inlineCode",{parentName:"p"},"service-definition.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\nspec:\n  type: NodePort\n  ports:\n    - targetPort: 80\n      port: 80\n      nodePort: 30008\n  selector:\n    app: myapp\n    type: front-end\n")),(0,r.kt)("p",null,"If you don't provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"targetPort"),", it is assumed to be the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"port"),". Use the selector to link the service to the pod."),(0,r.kt)("p",null,"To start the service, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl create -f service-definition.yml\n")),(0,r.kt)("p",null,"When more than one pod matches the selector, the service acts as a load balancer. Services can span across nodes."),(0,r.kt)("p",null,"A simple ClusterIP ",(0,r.kt)("inlineCode",{parentName:"p"},"service-definition.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: back-end\nspec:\n  type: ClusterIP\n  ports:\n    - targetPort: 80\n      port: 80\n  selector:\n    app: myapp\n    type: back-end\n")),(0,r.kt)("p",null,"The service can be accessed by other pods using the cluster ip or service name you get by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get services\n")),(0,r.kt)("h2",{id:"binding"},"Binding"),(0,r.kt)("p",null,"To change the Node a pod is running on, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Pod-binding-definition.yaml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Binding\nmetadata:\n  name: nginx\ntarget:\n  apiVersion: v1\n  kind: Node\n  name: node02\n")),(0,r.kt)("p",null,"Then send a POST request to binding api passing the yaml data converted to JSON:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type:application/json" --request POST \\\n--data \'{"apiVersion":"v1", "kind":"Binding",...}\' \\\nhttp://$SERVER/api/v1/namespaces/default/pod/$PODNAME/binding\n')))}d.isMDXComponent=!0}}]);