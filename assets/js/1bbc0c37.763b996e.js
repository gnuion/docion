"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[5911],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(d,".").concat(m)]||p[m]||s[m]||i;return t?o.createElement(f,a(a({ref:n},u),{},{components:t})):o.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5356:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const i={slug:"dockerfile-for-production",title:"Dockerfile for production",authors:["gnuion"],tags:["docker"]},a=void 0,l={permalink:"/docion/blog/dockerfile-for-production",editUrl:"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-12-08-write-dockerfile-for-production/index.mdx",source:"@site/blog/2022-12-08-write-dockerfile-for-production/index.mdx",title:"Dockerfile for production",description:"Here we explore how to write a dockerfile for production.",date:"2022-12-08T00:00:00.000Z",formattedDate:"December 8, 2022",tags:[{label:"docker",permalink:"/docion/blog/tags/docker"}],readingTime:1.99,hasTruncateMarker:!0,authors:[{name:"Jon Zuka",title:"Blog owner",url:"https://github.com/gnuion",imageURL:"https://github.com/gnuion.png",key:"gnuion"}],frontMatter:{slug:"dockerfile-for-production",title:"Dockerfile for production",authors:["gnuion"],tags:["docker"]},nextItem:{title:"Helm",permalink:"/docion/blog/helm"}},d={authorsImageUrls:[void 0]},c=[{value:"Writing the Dockerfile",id:"writing-the-dockerfile",level:2},{value:"Building the image",id:"building-the-image",level:2}],u={toc:c};function s(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Here we explore how to write a dockerfile for production."),(0,r.kt)("h2",{id:"writing-the-dockerfile"},"Writing the Dockerfile"),(0,r.kt)("p",null,"When creating an image for production, we often don't need the artifacts that were created during the build. Therefor, we can use ",(0,r.kt)("strong",{parentName:"p"},"multistage builds"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'\n#################\n# BUILD FOR LOCAL DEVELOPMENT\n#################\n\n# Base image for development\nFROM node:18-alpine3.15 As development\n\n# Update npm\nRUN npm install -g npm\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\nCOPY --chown=node:node package*.json yarn.lock ./\nRUN yarn install --frozen-lockfile\n\n# Bundle app source\nCOPY --chown=node:node . .\n\n# Use the node user from the image (instead of the root user)\nUSER node\n\n\n#################\n# BUILD FOR PRODUCTION\n#################\n\n# Base image for building production\nFROM node:18-alpine3.15 As build\n# ... your build instructions here\n\n# Update npm\nRUN npm install -g npm\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\nCOPY --chown=node:node package*.json yarn.lock ./\n# In order to run `yarn build` we need access to the Nest CLI which is a dev\n# dependency. In the previous development stage we ran \n# `yarn install --frozen-lockfile` which installed all dependencies, so we can \n# copy over the node_modules directory from the development image\nCOPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules\n\n# Bundle app source\nCOPY --chown=node:node . .\n\n# Set NODE_ENV environment variable\nENV NODE_ENV production\n\n# Create  a "dist" folder with the production build\nRUN yarn build\n\n# Running `yarn install --frozen-lockfile` removes the existing node_modules \n# directory and passing in --only=production ensures that only the production \n# dependencies are installed. This ensures that the node_modules directory is \n# as optimized as possible\nRUN rm -rf node_modules && yarn install --frozen-lockfile --only=production\n\n# Use the node user from the image (instead of the root user)\nUSER node\n\n\n#################\n# PRODUCTION\n#################\n\n# Base image for production\nFROM node:18-alpine3.15 As production\n\n# Copy the bundled code from the build stage to the production image\nCOPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules\nCOPY --chown=node:node --from=build /usr/src/app/dist ./dist\n\n# Use the node user from the image (instead of the root user)\nUSER node\n\n# Start the server using the production build\nCMD [ "node", "dist/main.js" ]\n')),(0,r.kt)("h2",{id:"building-the-image"},"Building the image"),(0,r.kt)("p",null,"To build the image run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t _imageTag_ .\n")),(0,r.kt)("p",null,"To test locally, you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -p hostPort:containerPort _imageTag_\n")),(0,r.kt)("p",null,"Now you can visit ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:hostPort")," and see your application."))}s.isMDXComponent=!0}}]);