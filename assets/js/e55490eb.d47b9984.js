"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[9019],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),i=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=i(e.components);return o.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=i(t),d=r,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||a;return t?o.createElement(g,s(s({ref:n},c),{},{components:t})):o.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var i=2;i<a;i++)s[i]=t[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:1},s="MongoDB",l={unversionedId:"kubernetes-example/mongodb-chart",id:"kubernetes-example/mongodb-chart",title:"MongoDB",description:"Deploy a MongoDB Application on a Kubernetes cluster using Helm.",source:"@site/docs/kubernetes-example/mongodb-chart.md",sourceDirName:"kubernetes-example",slug:"/kubernetes-example/mongodb-chart",permalink:"/docion/docs/kubernetes-example/mongodb-chart",draft:!1,editUrl:"https://github.com/gnuion/docion/tree/gh-edits/docs/kubernetes-example/mongodb-chart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/docion/docs/category/kubernetes"},next:{title:"Helm Charts",permalink:"/docion/docs/kubernetes-example/create-chart"}},p={},i=[{value:"Deploy MongoDB Statefull Set",id:"deploy-mongodb-statefull-set",level:2},{value:"Deploy MongoExpress",id:"deploy-mongoexpress",level:2},{value:"Ingress",id:"ingress",level:2},{value:"Testing Data Persistence",id:"testing-data-persistence",level:2},{value:"Uninstall MongoDB",id:"uninstall-mongodb",level:2}],c={toc:i};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mongodb"},"MongoDB"),(0,r.kt)("p",null,"Deploy a MongoDB Application on a Kubernetes cluster using Helm."),(0,r.kt)("h2",{id:"deploy-mongodb-statefull-set"},"Deploy MongoDB Statefull Set"),(0,r.kt)("p",null,"Visit ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts"},"Bitnami Helm Carts")," GitHub repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Add bitnami helm repository\nhelm repo add bitnami https://charts.bitnami.com/bitnami\n\n# Search the bitnami repository\nhelm search repo bitnami\n\n# Search for mongodb chart inside the bitnami repository\nhelm search repo bitnami/mongodb\n")),(0,r.kt)("p",null,"Explore the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/main/bitnami/mongodb#mongodb-parameters"},"MongoDB chart parameters")),(0,r.kt)("p",null,"Override chart values using a yaml file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# override-values.yaml\narchitecture: replicaset\nreplicaCount: 2\npersistence:\n  storageClass: "linode-block-storage"\nauth:\n  rootPassword: putRootPassword\n')),(0,r.kt)("p",null,"Install MongoDB using customized values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# helm install [release name] --values [my-values.yaml] [chart name]\nhelm install mongodb -- values override-values.yaml bitnami/mongodb\n")),(0,r.kt)("h2",{id:"deploy-mongoexpress"},"Deploy MongoExpress"),(0,r.kt)("p",null,"MongoExpress is the UI for MongoDB. As it is not a vital part of our application, it is only going to have one pod and one service."),(0,r.kt)("p",null,"Check the ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/mongo-express"},"MongoExpress Docker hub repository"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# mongo-express.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongo-express-Deployment\n  labels:\n    app: mongo-express\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n    app: mongo-express-ReplicaSet\n  template:\n    metadata:\n      labels:\n        app: mongo-express-Pod\n    spec:\n      containers:\n        - name: mongo-express\n          image: mongo-express\n          ports:\n            - containerPort:8081\n          env:\n            - name: ME_CONFIG_MONGODB_ADMINUSERNAME\n              value: root\n            - name: ME_CONFIG_MONGODB_SERVER\n              value: mongodb-0.mongodb-headless\n            - name: ME_CONFIG_MONGODB_ADMINPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: mongodb\n                  key: mongodb-root-password\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongo-express-Service\nspec:\n  selector:\n    app: mongo-express-Pod\n  ports:\n    - protocol: TCP\n      port: 8081\n      targetPort: 8081\n")),(0,r.kt)("p",null,"Install ",(0,r.kt)("strong",{parentName:"p"},"MongoExpress deployment"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f mongo-express.yaml\n")),(0,r.kt)("h2",{id:"ingress"},"Ingress"),(0,r.kt)("p",null,"An ingress defines the rules a service can be accessed from without the cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# mongo-express-Ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: mingo-express-Ingress\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - path: /\n            backend:\n              serviceName: mongo-express-Service\n              servicePort:8081\n")),(0,r.kt)("p",null,"Install the MongoExpress Ingress:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f mongo-express-Ingress.yaml\n")),(0,r.kt)("h2",{id:"testing-data-persistence"},"Testing Data Persistence"),(0,r.kt)("p",null,"Shut down all pods to check the data is persistent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Scale the statefulset to 0\nkubectl scale --repicas=0 statefulset/mongodb\n\n# Check the pods have been stopped\nkubectl get pods\n\n# Scale the statefulset back to 2\nkubectl scale --repicas=2 statefulset/mongodb\n")),(0,r.kt)("h2",{id:"uninstall-mongodb"},"Uninstall MongoDB"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm uninstall mongodb\n")))}m.isMDXComponent=!0}}]);