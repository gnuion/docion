"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[3058],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return t?r.createElement(k,o(o({ref:n},s),{},{components:t})):r.createElement(k,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7700:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const l={slug:"kubernetes",title:"Kubernetes",authors:["gnuion"],tags:["angular"]},o=void 0,i={permalink:"/docion/blog/kubernetes",editUrl:"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-29-kubernetes/index.mdx",source:"@site/blog/2022-10-29-kubernetes/index.mdx",title:"Kubernetes",description:"YAML in Kubernetes",date:"2022-10-29T00:00:00.000Z",formattedDate:"October 29, 2022",tags:[{label:"angular",permalink:"/docion/blog/tags/angular"}],readingTime:1.455,hasTruncateMarker:!1,authors:[{name:"Jon Zuka",title:"Blog owner",url:"https://github.com/gnuion",imageURL:"https://github.com/gnuion.png",key:"gnuion"}],frontMatter:{slug:"kubernetes",title:"Kubernetes",authors:["gnuion"],tags:["angular"]},nextItem:{title:"Minikube",permalink:"/docion/blog/minikube"}},p={authorsImageUrls:[void 0]},c=[{value:"YAML in Kubernetes",id:"yaml-in-kubernetes",level:2},{value:"Pod commands",id:"pod-commands",level:2},{value:"CRI-O",id:"cri-o",level:2},{value:"Replica Controller (deprecated)",id:"replica-controller-deprecated",level:2},{value:"Replica Set",id:"replica-set",level:2},{value:"Deployments",id:"deployments",level:2}],s={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"yaml-in-kubernetes"},"YAML in Kubernetes"),(0,a.kt)("p",null,"A simple ",(0,a.kt)("inlineCode",{parentName:"p"},"pod-definition.yml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\n    type: front-end\n    (any other key value pair)\nspec:\n  containers:\n    - name: nginx-container\n      image: docker.io/nginx\n")),(0,a.kt)("h2",{id:"pod-commands"},"Pod commands"),(0,a.kt)("p",null,"The following will create the pod:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"kubectl create -f pod-definition.yml")),(0,a.kt)("p",null,"To see pods use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl get pods\n")),(0,a.kt)("p",null,"To view detailed information about ",(0,a.kt)("inlineCode",{parentName:"p"},"my-app-pod"),' use"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl describe pod myapp-pod\n")),(0,a.kt)("h2",{id:"cri-o"},"CRI-O"),(0,a.kt)("p",null,"If using crio, you can see your running containers using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"crictl ps\n")),(0,a.kt)("h2",{id:"replica-controller-deprecated"},"Replica Controller (deprecated)"),(0,a.kt)("p",null,"A simple ",(0,a.kt)("inlineCode",{parentName:"p"},"rc-definition.yml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: myapp-rc\n  labels:\n    app: myapp\n    type: front-end\nspec:\n  template:\n    metadata:\n      name: myapp-pod\n      labels:\n        app: myapp\n        type: front-end\n    spec:\n      containers:\n        - name: nginx-container\n          image: docker.io/nginx\n  replicas: 3\n")),(0,a.kt)("p",null,"Note that the template is just the pod definition we created previously."),(0,a.kt)("p",null,"The following will create the ReplicationController:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"kubectl create -f rc-definition.yml")),(0,a.kt)("p",null,"To see pods use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl get rc\n")),(0,a.kt)("h2",{id:"replica-set"},"Replica Set"),(0,a.kt)("p",null,"A simple ",(0,a.kt)("inlineCode",{parentName:"p"},"replicaset-definition.yml")," file. Node the ",(0,a.kt)("strong",{parentName:"p"},"apiVersion")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: myapp-replicaset\n  labels:\n    app: myapp\n    type: front-end\nspec:\n  template:\n    metadata:\n      name: myapp-pod\n      labels:\n        app: myapp\n        type: front-end\n    spec:\n      containers:\n        - name: nginx-container\n          image: docker.io/nginx\n  replicas: 3\n  selector:\n    matchLabels:\n      type: front-end\n")),(0,a.kt)("p",null,"The key difference is the selector key, which takes other pods into consideration. If skipped, the value is assumed to be the same as the labels."),(0,a.kt)("p",null,"To replace a ReplicaSet with a new definition, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl replace -f replicaset-definition.yml\n")),(0,a.kt)("p",null,"To scale replicas use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl scale --replicas=6 -f replicaset-definition.yml\n")),(0,a.kt)("h2",{id:"deployments"},"Deployments"),(0,a.kt)("p",null,"The content of the Deployment definition file is similar to the ReplicaSet definition file, except for the ",(0,a.kt)("strong",{parentName:"p"},"kind"),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"To see all created objects at once, run:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"kubectl get all\n"))))}u.isMDXComponent=!0}}]);