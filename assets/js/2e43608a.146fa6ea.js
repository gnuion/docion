"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[4374],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=u(t),m=o,d=g["".concat(s,".").concat(m)]||g[m]||p[m]||a;return t?r.createElement(d,l(l({ref:n},c),{},{components:t})):r.createElement(d,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9984:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const a={slug:"k8s-nginx-ingress",title:"Kubernetes Nginx Ingress",authors:["gnuion"],tags:["kubernetes"]},l=void 0,i={permalink:"/docion/blog/k8s-nginx-ingress",editUrl:"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-31-k8s-nginx-ingress/index.mdx",source:"@site/blog/2022-10-31-k8s-nginx-ingress/index.mdx",title:"Kubernetes Nginx Ingress",description:"After bootstrapping Kubernetes using kubeadm and learning some Kubernetes primitives, we start to learn about an ingress controller. For convenience, we will use Helm as our package manager for Kubernetes.",date:"2022-10-31T00:00:00.000Z",formattedDate:"October 31, 2022",tags:[{label:"kubernetes",permalink:"/docion/blog/tags/kubernetes"}],readingTime:1.325,hasTruncateMarker:!0,authors:[{name:"Jon Zuka",title:"Blog owner",url:"https://github.com/gnuion",imageURL:"https://github.com/gnuion.png",key:"gnuion"}],frontMatter:{slug:"k8s-nginx-ingress",title:"Kubernetes Nginx Ingress",authors:["gnuion"],tags:["kubernetes"]},prevItem:{title:"Vite Import Alias",permalink:"/docion/blog/vite-import-alias"},nextItem:{title:"Minikube",permalink:"/docion/blog/minikube"}},s={authorsImageUrls:[void 0]},u=[{value:"Installing a container runner",id:"installing-a-container-runner",level:2},{value:"Bootstrapping Kubernetes using kubeadm",id:"bootstrapping-kubernetes-using-kubeadm",level:2},{value:"Using Helm",id:"using-helm",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"After bootstrapping Kubernetes using ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/"},"kubeadm")," and learning some Kubernetes primitives, we start to learn about an ingress controller. For convenience, we will use Helm as our package manager for Kubernetes."),(0,o.kt)("h2",{id:"installing-a-container-runner"},"Installing a container runner"),(0,o.kt)("p",null,"Let's make sure we have a container runner installed and the service running. For Arch Linux:"),(0,o.kt)("p",null,"Install CRI-O:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo pacman -Syu cri-o\n")),(0,o.kt)("p",null,"Enable the CRI-O service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo systemctl enable --now crio\n")),(0,o.kt)("h2",{id:"bootstrapping-kubernetes-using-kubeadm"},"Bootstrapping Kubernetes using kubeadm"),(0,o.kt)("p",null,"Now we can bootstrap our Kubernetes installation by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo kubeadm init --pod-network-cidr=192.168.0.0/16\n")),(0,o.kt)("p",null,"To be able to run kubectl from current user use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n")),(0,o.kt)("p",null,"Now install ",(0,o.kt)("a",{parentName:"p",href:"https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart"},"Calico"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install the Tigera Calico operator and custom resource definitions.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.3/manifests/tigera-operator.yaml\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Install Calico by creating the necessary custom resource:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.3/manifests/custom-resources.yaml\n")),(0,o.kt)("p",null,"Verify that all system pods are running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl get pods --all-namespaces\n")),(0,o.kt)("p",null,"By default, new pods will not be scheduled on the control plane node. You can change that by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl taint nodes --all node-role.kubernetes.io/control-plane-\n")),(0,o.kt)("h2",{id:"using-helm"},"Using Helm"),(0,o.kt)("p",null,"To install helm use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo pacman -S helm\n")),(0,o.kt)("p",null,"To allow referencing to localhost via ipv6, modify ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/resolved.conf")," to include:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# /etc/systemd/resolved.conf\nDNSStubListenerExtra=[::1]:53\n")),(0,o.kt)("p",null,"Add nginx repo by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx=\n")),(0,o.kt)("p",null,"Now update helm repo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"helm repo update\n")),(0,o.kt)("p",null,"To view chart configuration values run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"helm show values ingress-nginx/ingress-nginx\n")),(0,o.kt)("p",null,"To install the chart run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"helm install ingress-nginx ingress-nginx/ingress-nginx\n")))}p.isMDXComponent=!0}}]);