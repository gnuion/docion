"use strict";(self.webpackChunkdocion=self.webpackChunkdocion||[]).push([[9408],{7010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"install-custom-image-on-contabo","metadata":{"permalink":"/docion/blog/install-custom-image-on-contabo","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-11-26-install-custom-image-on-contabo/index.md","source":"@site/blog/2022-11-26-install-custom-image-on-contabo/index.md","title":"Install custom image on Contabo","description":"How to install a custom Arch Image on Contabo.","date":"2022-11-26T00:00:00.000Z","formattedDate":"November 26, 2022","tags":[{"label":"backend","permalink":"/docion/blog/tags/backend"}],"readingTime":2.265,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"install-custom-image-on-contabo","title":"Install custom image on Contabo","authors":["gnuion"],"tags":["backend"]},"nextItem":{"title":"Redux Toolkit Template","permalink":"/docion/blog/redux-toolkit-template"}},"content":"How to install a custom Arch Image on Contabo.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Choose Custom installation\\n\\nDisable cloud-init\\n\\n![Custom Install](./disable_could_init.png)\\n\\nChoose custom install\\n\\n![Custom Install](./initiate_custom_install.png)\\n\\nNow use a VNC client with the provided credentials from contabo. Then choose your image. Here I chose Arch Linux.\\n\\n![Custom Install](./archlinux_installation_screen.png)\\n\\nDo a ping test:\\n\\n```bash\\nping google.com\\n```\\n\\n### Create Partitions\\n\\nCreate an empty GPT partition table. Use `m` for a list of avalable commands.\\n\\n```bash\\nfdisk /dev/sda\\n```\\n\\nCreate a `bios_grub` partiton of 1MiB starting at 1MiB from the start of the disk.\\n\\n```bash\\nn\\n2048\\n+1MiB\\n```\\n\\nSet type as `bios_grub`.\\n\\n```bash\\nt\\n4\\n```\\n\\nNow create the `root` partition with the size of 30GiB:\\n\\n```bash\\nn\\n2\\n4096\\n+30GiB\\n```\\n\\nCreate other partitions you might need, for example `home`.\\n\\nFormat partitions with a ext4 filesystem:\\n\\n```bash\\nmkfs -t ext4 /dev/sda2\\n```\\n\\nMount root partition in `/mnt` directory. In case you craeted a `home` partition, mount it to `/mnt/home`\\n\\n```bash\\nmount /dev/sda2 /mnt\\nmount -o x-mount.mkdir /dev/sda4 /mnt/home\\n```\\n\\nInstall base system:\\n\\n```bash\\npacstrap -i /mnt base linux linux-firmware\\n```\\n\\nConfigure fstab for the new installation.\\n\\n```bash\\ngenfstab -U /mnt >> /mnt/etc/fstab\\n```\\n\\n### Chroot\\n\\nChange root into the new system. Then install a text editor.\\n\\n```bash\\narch-chroot /mnt\\npacman -S nano\\n```\\n\\nSet timezone:\\n\\n```bash\\nln -sf /usr/share/zoneinfo/Region/City /etc/localtime\\n```\\n\\nEdit `/etc/locale.gen` by uncommenting `en_US.UTF-8 UTF-8`. Generate the locales.\\n\\n```bash\\nnano /etc/locale.gen\\nlocale-gen\\n```\\n\\nCreate a locale.conf file, and set the LANG variable accordingly.\\n\\n```conf\\n# /etc/locale.conf\\nLANG=en_US.UTF-8\\n```\\n\\nImportant! Don\'t forget to setup a root password!\\n\\n```bash\\npasswd\\n```\\n\\nInstall bootloader.\\n\\n```bash\\npacman -S grub\\ngrub-install /dev/sda --target=i386-pc\\ngrub-mkconfig -o /boot/grub/grub.cfg\\n```\\n\\nReboot and good luck \ud83e\udd1e.\\n\\n### Configuring network\\n\\nTo use systemd-networkd, enable the service. When reconiguring, restart service.\\n\\n```bash\\nsystemctl enable --now systemd-networkd\\n```\\n\\nCheck network device name using `ip a`.\\n\\n#### Wired adapter using DHCP\\n\\n```bash\\n# /etc/systemd/network/20-wired.network\\n[Match]\\nName=YOUR_NETWORK_DEVICE_NAME\\n\\n[Network]\\nDHCP=yes\\nDNS=8.8.8.8\\n```\\n\\n#### Wired adapter using a static IP\\n\\n```bash\\n# /etc/systemd/network/20-wired.network\\n[Match]\\nName=YOUR_NETWORK_DEVICE_NAME\\n\\n[Network]\\nAddress=YOUR_STATIC_IP_ADDRESS\\nGateway=YOUR_GATEWAY\\nDNS=8.8.8.8\\n```\\n\\n```bash\\nsystemctl enable --now systemd-networkd\\n```\\n\\n### Install sudo\\n\\n```bash\\npacman -S sudo\\n```\\n\\nCreate a new user.\\n\\n```bash\\nuseradd --create-home YOUR_USERNAME\\nusermod --append --groups wheel\\n```\\n\\nEdit sudoes file to uncommen wheel user.\\n\\n```bash\\nEDITOR=nano visudo\\n\\n# Then find and uncomment\\n%wheel ALL=(ALL:ALL) NOPASSWD:ALL\\n\\n# Then login to user and test\\nsu YOUR_USERNAME\\nsudo echo hello\\n```\\n\\n### Enable SSH\\n\\n```bash\\nsudo pacman -S openssh\\nsudo systemctl enable --now sshd\\n```\\n\\nGenerate `ssh` key.\\nGenerate keys on client and server.\\n\\n```bash\\nssh-keygen -t ed25519\\n```\\n\\nCopy the content of the public key of the client and paste is to the file `~/.ssh/authorized_keys` on the server.\\n\\nForce public key authentication\\n\\n```bash\\n# /etc/ssh/sshd_config\\nPasswordAuthentication no\\nAuthenticationMethods publickey\\n```"},{"id":"redux-toolkit-template","metadata":{"permalink":"/docion/blog/redux-toolkit-template","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-11-15-redux-toolkit-template/index.mdx","source":"@site/blog/2022-11-15-redux-toolkit-template/index.mdx","title":"Redux Toolkit Template","description":"Redux toolkit (RTK) offers a great solution for state management and caching data. Let\'s get started!","date":"2022-11-15T00:00:00.000Z","formattedDate":"November 15, 2022","tags":[{"label":"react","permalink":"/docion/blog/tags/react"},{"label":"redux toolkit","permalink":"/docion/blog/tags/redux-toolkit"},{"label":"frontend","permalink":"/docion/blog/tags/frontend"}],"readingTime":2.655,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"redux-toolkit-template","title":"Redux Toolkit Template","authors":["gnuion"],"tags":["react","redux toolkit","frontend"]},"prevItem":{"title":"Install custom image on Contabo","permalink":"/docion/blog/install-custom-image-on-contabo"},"nextItem":{"title":"Vite Import Alias","permalink":"/docion/blog/vite-import-alias"}},"content":"Redux toolkit (RTK) offers a great solution for state management and caching data. Let\'s get started!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Create a new project\\nFollow the prompts. Use react and typescript.\\n```bash\\nyarn create vite\\n```\\n\\nInstall dependencies:\\n```bash\\nyarn i @reduxjs/toolkit react-redux axios\\n```\\n\\n## Create redux slice\\n\\nCreate a folder named `counter`\\n\\n```bash\\nmkdir ./src/features/counter\\n```\\n\\nInside the `counter` folder, create a file named `counterSlice.ts`. It should have the following content.\\n\\n```typescript\\n// counterSlice.ts\\n\\nimport { createSlice, PayloadAction } from \'@reduxjs/toolkit\'\\n\\ninterface CounterState {\\n  value: number\\n}\\n\\nconst initialState: CounterState = {\\n  value: 0\\n}\\n\\nconst counterSlice = createSlice({\\n  name: \'counter\',\\n  initialState,\\n  reducers: {\\n    incremented(state) {\\n      state.value++;\\n    },\\n      amountAdded(state, action: PayloadAction<number>) {\\n      state.value += action.payload\\n    }\\n  }\\n});\\n\\n\\nexport const { incremented, amountAdded } = counterSlice.actions\\nexport default counterSlice.reducer\\n```\\n\\n## Configure redux store\\n\\nMake a new folder called `app`\\n\\n```bash\\nmkdir ./src/app\\n```\\n\\nInside the `app` folder, create a file named `store.ts`. It should have the following content:\\n\\n```typescript\\nimport { configureStore } from \\"@reduxjs/toolkit\\";\\nimport counterReducer from \'../features/counter/counterSlice\'\\n\\nexport const store = configureStore({\\n  reducer: {\\n    counter: counterReducer\\n  }\\n})\\n\\nexport type AppDispatch = typeof store.dispatch;\\nexport type RootState = ReturnType<typeof store.getState>;\\n```\\n\\nSetup the redux react provider so the application can access the store. Inside the `main.ts` file, make adjustments:\\n\\n```typescript\\nimport { Provider } from \'react-redux\'\\nimport { store } from \'./app/store\'\\n...\\n  <Provider store={store}>\\n    <App />\\n  </Provider>\\n...\\n```\\n\\nInside the `./src/app` folder, let\'s make a file called `hooks.ts`. It should have the following content:\\n\\n```typescript\\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \'react-redux\'\\nimport { RootState, AppDispatch } from \'./store\'\\n\\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\\n```\\n\\n## Using the store\\n\\nInside `App.ts`, import those hooks and the `incremented` action creator:\\n\\n```typescript\\nimport { useAppDispatch, useAppSelector } from \'./app/hooks\'\\nimport { incremented } from \'./features/counter/counterSlice\'\\n```\\n\\nNow read the count value using:\\n\\n```typescript\\nconst count = useAppSelector((state) => state.counter.value)\\n```\\n\\nDispatch action using: \\n```typescript\\nconst dispatch = useAppDispatch()\\n...\\n  // onClick={() => dispatch(incremented())}\\n  onClick={() => dispatch(amountAdded(5))}\\n...\\n```\\n\\n## Using RTK Query\\n\\nInside the `./src/feature/dogs/` folder, create a file named `dogsApiSlice.ts`. It should have the following content:\\n\\n```typescript\\nimport { createApi, fetchBaseQuery } from \'@reduxjs/toolkit/query/react\'\\n\\nconst DOGS_API_KEY = \'your_dog_api_key_here\'\\n\\ninterface Breed {\\n  id: string;\\n  name: string;\\n  image: {\\n    url: string;\\n  }\\n}\\n\\nexport const dogsApiSlice = createApi({\\n  reducerPath: \'api\',\\n  baseQuery: fetchBaseQuery({\\n    baseUrl: \'https://api.thedogapi.com/v1\',\\n    prepareHeaders(headers) {\\n      headers.set(\'x-api-key\', DOGS_API_KEY);\\n      return headers\\n    }\\n  }),\\n  endpoints(builder) {\\n    return {\\n      fetchBreeds: builder.query<Breed[], number | void>({\\n        query(limit = 10) {\\n          return `/breeds?limit=${limit}`\\n        }\\n      })\\n    }\\n  }\\n})\\n\\nexport const { useFetchBreedsQuery } = dogsApiSlice\\n```\\n\\nLet\'s go back to our `store.ts` file. After importing, adding the reducer and the middleware, it should look like this:\\n\\n```typescript\\nimport { configureStore } from \\"@reduxjs/toolkit\\";\\nimport counterReducer from \'../features/counter/counterSlice\'\\nimport { dogsApiSlice } from \\"../features/dogs/dogsApiSlice\\";\\n\\nexport const store = configureStore({\\n  reducer: {\\n    counter: counterReducer,\\n    [dogsApiSlice.reducerPath]: dogsApiSlice.reducer\\n  },\\n  middleware: (getDefaultMiddleware) => {\\n    return getDefaultMiddleware().concat(dogsApiSlice.middleware)\\n  }\\n})\\n\\nexport type AppDispatch = typeof store.dispatch;\\nexport type RootState = ReturnType<typeof store.getState>;\\n```\\n\\nNow, to fetch, go to `App.ts`.\\n\\n```typescript\\nimport { useFetchBreedsQuery } from \'./features/dogs/dogsApiSlice\'\\n\\nfunction App() {\\n  const { data = [], isFetching } = useFetchBreedsQuery();\\n  ...\\n}\\n```"},{"id":"vite-import-alias","metadata":{"permalink":"/docion/blog/vite-import-alias","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-11-9-vite-alias/index.mdx","source":"@site/blog/2022-11-9-vite-alias/index.mdx","title":"Vite Import Alias","description":"Under vite.config.ts, inside the defineConfig object, add:","date":"2022-11-09T00:00:00.000Z","formattedDate":"November 9, 2022","tags":[{"label":"vite","permalink":"/docion/blog/tags/vite"},{"label":"frontend","permalink":"/docion/blog/tags/frontend"}],"readingTime":0.24,"hasTruncateMarker":false,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"vite-import-alias","title":"Vite Import Alias","authors":["gnuion"],"tags":["vite","frontend"]},"prevItem":{"title":"Redux Toolkit Template","permalink":"/docion/blog/redux-toolkit-template"},"nextItem":{"title":"Kubernetes Nginx Ingress","permalink":"/docion/blog/k8s-nginx-ingress"}},"content":"Under `vite.config.ts`, inside the `defineConfig` object, add:\\n\\n```typescript\\ndefineConfig: {\\n  resolve: {\\n    alias: {\\n      \'@\': path.resolve(__dirname, \'./src\')\\n    }\\n  }\\n}\\n```\\n\\nThen, under `tsconfig.json`, inside the `compilerOptions` object, add:\\n\\n```json\\n\\"compilerOptions\\": {\\n  \\"paths\\": {\\n    \\"@/*\\": [\\"./src/*\\"]\\n  }\\n}\\n```\\n\\nNow, instead of `../../../component`, you can simply use `@/component`."},{"id":"k8s-nginx-ingress","metadata":{"permalink":"/docion/blog/k8s-nginx-ingress","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-31-k8s-nginx-ingress/index.mdx","source":"@site/blog/2022-10-31-k8s-nginx-ingress/index.mdx","title":"Kubernetes Nginx Ingress","description":"After bootstrapping Kubernetes using kubeadm and learning some Kubernetes primitives, we start to learn about an ingress controller. For convenience, we will use Helm as our package manager for Kubernetes.","date":"2022-10-31T00:00:00.000Z","formattedDate":"October 31, 2022","tags":[{"label":"kubernetes","permalink":"/docion/blog/tags/kubernetes"}],"readingTime":1.325,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"k8s-nginx-ingress","title":"Kubernetes Nginx Ingress","authors":["gnuion"],"tags":["kubernetes"]},"prevItem":{"title":"Vite Import Alias","permalink":"/docion/blog/vite-import-alias"},"nextItem":{"title":"Kubernetes Basics","permalink":"/docion/blog/kubernetes-basics"}},"content":"After bootstrapping Kubernetes using [kubeadm](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/) and learning some Kubernetes primitives, we start to learn about an ingress controller. For convenience, we will use Helm as our package manager for Kubernetes.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Installing a container runner\\n\\nLet\'s make sure we have a container runner installed and the service running. For Arch Linux:\\n\\nInstall CRI-O:\\n\\n```\\nsudo pacman -Syu cri-o\\n```\\n\\nEnable the CRI-O service:\\n```\\nsudo systemctl enable --now crio\\n```\\n\\n## Bootstrapping Kubernetes using kubeadm\\n\\nNow we can bootstrap our Kubernetes installation by running:\\n\\n```\\nsudo kubeadm init --pod-network-cidr=192.168.0.0/16\\n```\\n\\nTo be able to run kubectl from current user use:\\n\\n```\\nmkdir -p $HOME/.kube\\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\\n```\\n\\nNow install [Calico](https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart):\\n\\n1. Install the Tigera Calico operator and custom resource definitions.\\n\\n```\\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.3/manifests/tigera-operator.yaml\\n```\\n\\n2. Install Calico by creating the necessary custom resource:\\n\\n```\\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.3/manifests/custom-resources.yaml\\n```\\n\\nVerify that all system pods are running:\\n```\\nkubectl get pods --all-namespaces\\n```\\n\\nBy default, new pods will not be scheduled on the control plane node. You can change that by running:\\n\\n```\\nkubectl taint nodes --all node-role.kubernetes.io/control-plane-\\n```\\n\\n## Using Helm\\n\\nTo install helm use:\\n\\n```\\nsudo pacman -S helm\\n```\\n\\nTo allow referencing to localhost via ipv6, modify `/etc/systemd/resolved.conf` to include:\\n\\n```\\n# /etc/systemd/resolved.conf\\nDNSStubListenerExtra=[::1]:53\\n```\\n\\nAdd nginx repo by running:\\n\\n```\\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx=\\n```\\n\\nNow update helm repo:\\n\\n```\\nhelm repo update\\n```\\n\\nTo view chart configuration values run:\\n\\n```\\nhelm show values ingress-nginx/ingress-nginx\\n```\\n\\nTo install the chart run:\\n\\n```\\nhelm install ingress-nginx ingress-nginx/ingress-nginx\\n```"},{"id":"kubernetes-basics","metadata":{"permalink":"/docion/blog/kubernetes-basics","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-29-kubernetes-basics/index.mdx","source":"@site/blog/2022-10-29-kubernetes-basics/index.mdx","title":"Kubernetes Basics","description":"In this blog we explore some basic concepts of kubernetes. It is helpful to have template files.","date":"2022-10-29T00:00:00.000Z","formattedDate":"October 29, 2022","tags":[{"label":"angular","permalink":"/docion/blog/tags/angular"}],"readingTime":3.075,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"kubernetes-basics","title":"Kubernetes Basics","authors":["gnuion"],"tags":["angular"]},"prevItem":{"title":"Kubernetes Nginx Ingress","permalink":"/docion/blog/k8s-nginx-ingress"},"nextItem":{"title":"Minikube","permalink":"/docion/blog/minikube"}},"content":"In this blog we explore some basic concepts of kubernetes. It is helpful to have template files.\\n\\n\x3c!-- truncate --\x3e\\n\\n## YAML in Kubernetes\\nA simple `pod-definition.yml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: myapp-pod\\n  labels:\\n    app: myapp\\n    type: front-end\\n    (any other key value pair)\\nspec:\\n  containers:\\n    - name: nginx-container\\n      image: docker.io/nginx\\n```\\n\\n\\n\\n## Pod commands\\n\\nThe following will create the pod:\\n\\n`kubectl create -f pod-definition.yml`\\n\\nTo see pods use:\\n```\\nkubectl get pods\\n```\\n\\nTo view detailed information about `my-app-pod` use\\"\\n\\n```\\nkubectl describe pod myapp-pod\\n```\\n\\n## CRI-O\\n\\nIf using crio, you can see your running containers using:\\n\\n```\\ncrictl ps\\n```\\n\\n## Replica Controller (deprecated)\\n\\nA simple `rc-definition.yml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: ReplicationController\\nmetadata:\\n  name: myapp-rc\\n  labels:\\n    app: myapp\\n    type: front-end\\nspec:\\n  template:\\n    metadata:\\n      name: myapp-pod\\n      labels:\\n        app: myapp\\n        type: front-end\\n    spec:\\n      containers:\\n        - name: nginx-container\\n          image: docker.io/nginx\\n  replicas: 3\\n```\\n\\nNote that the template is just the pod definition we created previously.\\n\\nThe following will create the ReplicationController:\\n\\n`kubectl create -f rc-definition.yml`\\n\\nTo see pods use:\\n```\\nkubectl get rc\\n```\\n\\n## Replica Set\\n\\nA simple `replicaset-definition.yml` file. Node the __apiVersion__\\n\\n```yml\\napiVersion: apps/v1\\nkind: ReplicaSet\\nmetadata:\\n  name: myapp-replicaset\\n  labels:\\n    app: myapp\\n    type: front-end\\nspec:\\n  template:\\n    metadata:\\n      name: myapp-pod\\n      labels:\\n        app: myapp\\n        type: front-end\\n    spec:\\n      containers:\\n        - name: nginx-container\\n          image: docker.io/nginx\\n  replicas: 3\\n  selector:\\n    matchLabels:\\n      type: front-end\\n```\\n\\nThe key difference is the selector key, which takes other pods into consideration. If skipped, the value is assumed to be the same as the labels.\\n\\nTo replace a ReplicaSet with a new definition, run:\\n\\n```\\nkubectl replace -f replicaset-definition.yml\\n```\\n\\nTo scale replicas use:\\n\\n```\\nkubectl scale --replicas=6 -f replicaset-definition.yml\\n```\\n\\n## Deployments\\n\\nThe content of the Deployment definition file is similar to the ReplicaSet definition file, except for the __kind__.\\n\\n:::tip\\nTo see all created objects at once, run:\\n```\\nkubectl get all\\n```\\n:::\\n\\n## Namespaces\\n\\nSo far, we have been working inside the __default__ namespace.\\n\\nA simple `namespace-dev.yml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: Namespace\\nmetadata:\\n  name: dev\\n```\\n\\nTo create the namespace run:\\n\\n```\\nkubectl create -f namespace-dev.yml\\n```\\n\\nAlternative, you can run:\\n\\n```\\nkubectl create namespace dev\\n```\\n\\nTo switch to the dev namespace run:\\n\\n```\\nkubectl config set-context $(kubectl config current-context) --namespace=dev\\n```\\n\\nTo view pods in all namespaces, run:\\n\\n```\\nkubectl get pods --all-namespaces\\n```\\n\\n## Resource Quota\\n\\nA simple `resource-quota.yml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: ResourceQuota\\nmetadata:\\n  name: resource-quota\\n  namespace: dev\\nspec:\\n  hard:\\n    pods: \\"10\\"\\n    requests.cpu: \\"4\\"\\n    requests.memory: 5Gi\\n    limits.cpu: \\"10\\"\\n    limits.memory: 10Gi\\n```\\n\\n## Services\\n\\nA simple NodePort `service-definition.yml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: myapp-service\\nspec:\\n  type: NodePort\\n  ports:\\n    - targetPort: 80\\n      port: 80\\n      nodePort: 30008\\n  selector:\\n    app: myapp\\n    type: front-end\\n```\\n\\nIf you don\'t provide a `targetPort`, it is assumed to be the same as `port`. Use the selector to link the service to the pod.\\n\\nTo start the service, run:\\n\\n```\\nkubectl create -f service-definition.yml\\n```\\n\\nWhen more than one pod matches the selector, the service acts as a load balancer. Services can span across nodes.\\n\\n\\nA simple ClusterIP `service-definition.yml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: back-end\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - targetPort: 80\\n      port: 80\\n  selector:\\n    app: myapp\\n    type: back-end\\n```\\n\\nThe service can be accessed by other pods using the cluster ip or service name you get by running:\\n\\n```\\nkubectl get services\\n```\\n\\n## Binding\\n\\nTo change the Node a pod is running on, create a `Pod-binding-definition.yaml` file:\\n\\n```yaml\\napiVersion: v1\\nkind: Binding\\nmetadata:\\n  name: nginx\\ntarget:\\n  apiVersion: v1\\n  kind: Node\\n  name: node02\\n```\\n\\nThen send a POST request to binding api passing the yaml data converted to JSON:\\n\\n```bash\\ncurl --header \\"Content-Type:application/json\\" --request POST \\\\\\n--data \'{\\"apiVersion\\":\\"v1\\", \\"kind\\":\\"Binding\\",...}\' \\\\\\nhttp://$SERVER/api/v1/namespaces/default/pod/$PODNAME/binding\\n```"},{"id":"minikube","metadata":{"permalink":"/docion/blog/minikube","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-28-minikube/index.mdx","source":"@site/blog/2022-10-28-minikube/index.mdx","title":"Minikube","description":"Kubernetes is a enterprise application and is designed to run across multiple machines. Each machine is called a node.","date":"2022-10-28T00:00:00.000Z","formattedDate":"October 28, 2022","tags":[{"label":"angular","permalink":"/docion/blog/tags/angular"}],"readingTime":0.8,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"minikube","title":"Minikube","authors":["gnuion"],"tags":["angular"]},"prevItem":{"title":"Kubernetes Basics","permalink":"/docion/blog/kubernetes-basics"},"nextItem":{"title":"Angular in Docker","permalink":"/docion/blog/angular-in-docker"}},"content":"Kubernetes is a enterprise application and is designed to run across multiple machines. Each machine is called a node. \\n\\n\x3c!-- truncate --\x3e\\n\\n## Setting up a learning environment\\n\\nWhen learning, we might have only one machine available. In that case we can create a single node setup using [minikube](https://minikube.sigs.k8s.io/docs/start/). Here we assume we already know basics of docker. Continue buy installing minikube following the documentation for your specific OS. In ArchLinux type:\\n\\n```\\nsudo pacman -Sy minikube\\n```\\n\\nTo start a single node cluster run:\\n\\n```\\nminikube start\\n```\\n\\nSelect docker as the execution engine. VMs are also an option, but consume more resources. You can check the newly created cluster using:\\n\\n``` \\nminikube status\\n```\\n\\nTo stop the cluster run:\\n\\n```\\nminikube stop\\n```\\n\\nVisit the [documentation](https://minikube.sigs.k8s.io/docs/start/) for more minikube commands.\\n\\n## Interact with your cluster\\n\\nIf you already have kubectl installed, you can now use it to access your shiny new cluster:\\n\\n```\\nkubectl get po -A\\n```"},{"id":"angular-in-docker","metadata":{"permalink":"/docion/blog/angular-in-docker","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-25-angular-in-docker/index.mdx","source":"@site/blog/2022-10-25-angular-in-docker/index.mdx","title":"Angular in Docker","description":"Angular not always supports the latest node.js version. Docker can help keep our system clean.","date":"2022-10-25T00:00:00.000Z","formattedDate":"October 25, 2022","tags":[{"label":"angular","permalink":"/docion/blog/tags/angular"}],"readingTime":0.81,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"angular-in-docker","title":"Angular in Docker","authors":["gnuion"],"tags":["angular"]},"prevItem":{"title":"Minikube","permalink":"/docion/blog/minikube"},"nextItem":{"title":"Make RAID0 array using MDADM","permalink":"/docion/blog/raid0-with-mdadm"}},"content":"Angular not always supports the latest node.js version. Docker can help keep our system clean.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Create node user\\n\\nFor best practice, create node user and append node group to current user.\\n\\n```\\nsudo useradd node\\nsudo usermod --append --groups node $USER\\n```\\n\\n## Build Angular image:\\n\\nUse the node version Angular supports. At the time of this writing it is version 14.\\n\\n```Dockerfile\\nFROM node:14-alpine\\nRUN npm install -g @angular/cli\\nUSER node\\nWORKDIR /app\\nEXPOSE 4200 49153\\nCMD npm start\\n```\\n\\nBuild the image. In this example it is tagged `ng`:\\n\\n```\\ndocker build --tag ng .\\n```\\n\\n## Using the Angular CLI within Docker\\n\\nRun the development container:\\n\\n```\\ndocker run -it -v $(pwd):/app -p 4200:4200 -p 49153:49153 --name ng ng sh\\n```\\n\\nCreate a new project:\\n\\n```\\nng new --skip-git\\n```\\n\\nAdjust `start` script in package.json to:\\n\\n```\\n start\\": \\"ng serve --host 0.0.0.0 --poll\\"\\n```\\n\\nOtherwise the port would not be accessible from outside the container."},{"id":"raid0-with-mdadm","metadata":{"permalink":"/docion/blog/raid0-with-mdadm","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-15-raid0-with-mdadm/index.mdx","source":"@site/blog/2022-10-15-raid0-with-mdadm/index.mdx","title":"Make RAID0 array using MDADM","description":"Sometimes you need RAID0 for increased capacity and speed.","date":"2022-10-15T00:00:00.000Z","formattedDate":"October 15, 2022","tags":[{"label":"web3","permalink":"/docion/blog/tags/web-3"}],"readingTime":0.76,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"raid0-with-mdadm","title":"Make RAID0 array using MDADM","authors":["gnuion"],"tags":["web3"]},"prevItem":{"title":"Angular in Docker","permalink":"/docion/blog/angular-in-docker"},"nextItem":{"title":"Build Chia Docker Container","permalink":"/docion/blog/build-chia-docker-container"}},"content":"Sometimes you need RAID0 for increased capacity and speed.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Load needed modules\\n\\nStart with loading the raid0 kernel module:\\n\\n```\\nmodprobe raid0\\n```\\n\\nAdd it to /etc/modules-load.d so it gets loaded during next reboot:\\n\\n```\\necho raid0 >> /etc/modules-load.d/raid0.conf\\n```\\n\\n## Assemble existing array\\n\\nFind UUID of target array:\\n\\n```\\nblkid\\n```\\n\\nAssemble using mdadm:\\n\\n```\\nmdadm --assemble /dev/md0 --uuid <array_uuid>\\n```\\n\\n## Make persistant on Alpine:\\n\\nCreate the /etc/mdadm.conf file so mdadm knows how your RAID is set up:\\n\\n```\\nmdadm --detail --scan > /etc/mdadm.conf\\n```\\n\\nTo make sure the raid devices start during the next reboot run:\\n\\n```\\nrc-update add mdadm-raid\\n```\\n\\nTo use the raid array in /etc/fstab at boot, the mdadm service must be started at boot time:\\n\\n```\\nrc-update add mdadm boot\\n```\\n\\n```\\nrc-update add mdadm-raid boot\\n```\\n\\nFinally, to persist changes in `/etc` directory, run (Alpine only!):\\n\\n```\\nlbu ci\\n```"},{"id":"build-chia-docker-container","metadata":{"permalink":"/docion/blog/build-chia-docker-container","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-13-build-chia-docker-container/index.mdx","source":"@site/blog/2022-10-13-build-chia-docker-container/index.mdx","title":"Build Chia Docker Container","description":"Chia Blockchain is a protocol that uses Proof-Of-Space-Time (PoST) for consensus. Here we will use an image container for quick configuration.","date":"2022-10-13T00:00:00.000Z","formattedDate":"October 13, 2022","tags":[{"label":"web3","permalink":"/docion/blog/tags/web-3"}],"readingTime":0.45,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"build-chia-docker-container","title":"Build Chia Docker Container","authors":["gnuion"],"tags":["web3"]},"prevItem":{"title":"Make RAID0 array using MDADM","permalink":"/docion/blog/raid0-with-mdadm"},"nextItem":{"title":"Virtualization with QEMU","permalink":"/docion/blog/virtualization-with-qemu"}},"content":"Chia Blockchain is a protocol that uses Proof-Of-Space-Time (PoST) for consensus. Here we will use an image container for quick configuration.\\n\\n\x3c!-- truncate --\x3e\\n\\n[Docker](https://docs.docker.com/get-started/overview/) enables you to seperate your applicatin from your infrastructure so you can deliver software quickly.\\n\\n## Run chia docker\\n\\n- Clone repe:\\n\\n```\\ngit clone https://github.com/gnuion/chia-docker.git\\n```\\n\\n- Configure and run `docker-compose up`. You can use my image, or build it yourself.\\n\\nYou can then start and stop your services using `docker-compose up` and `docker-compose down` respectively.\\n\\n## Build it yourself\\n\\nVisit [Chia in Docker](https://github.com/gnuion/chia-docker/)"},{"id":"virtualization-with-qemu","metadata":{"permalink":"/docion/blog/virtualization-with-qemu","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-12-virtualization-with-qemu/index.mdx","source":"@site/blog/2022-10-12-virtualization-with-qemu/index.mdx","title":"Virtualization with QEMU","description":"A virtual machine (VM) is a virtual environment that functions as a virtual computer system with its own CPU, memory, network interface, and storage, created on a physical hardware system.","date":"2022-10-12T00:00:00.000Z","formattedDate":"October 12, 2022","tags":[{"label":"web","permalink":"/docion/blog/tags/web"}],"readingTime":0.275,"hasTruncateMarker":false,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"virtualization-with-qemu","title":"Virtualization with QEMU","authors":["gnuion"],"tags":["web"]},"prevItem":{"title":"Build Chia Docker Container","permalink":"/docion/blog/build-chia-docker-container"},"nextItem":{"title":"Scaffolding React App","permalink":"/docion/blog/scaffolding-react-app"}},"content":"A virtual machine (VM) is a virtual environment that functions as a virtual computer system with its own CPU, memory, network interface, and storage, created on a physical hardware system.\\n\\nOne easy way to get started in [ArchLinux](https://wiki.archlinux.org/title/Virt-Manager) is with VirtManager. The GUI is straighforward.\\n\\n```\\npacman -S virt-manager qemu-desktop libvirt edk2-ovmf dnsmasq iptables-nft\\n```"},{"id":"scaffolding-react-app","metadata":{"permalink":"/docion/blog/scaffolding-react-app","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2022-10-10-react-app-scaffold/index.mdx","source":"@site/blog/2022-10-10-react-app-scaffold/index.mdx","title":"Scaffolding React App","description":"React is a library it doesn\'t care about project structure. You have to manage it instead.","date":"2022-10-10T00:00:00.000Z","formattedDate":"October 10, 2022","tags":[{"label":"web","permalink":"/docion/blog/tags/web"}],"readingTime":0.385,"hasTruncateMarker":true,"authors":[{"name":"Jon Zuka","title":"Blog owner","url":"https://github.com/gnuion","imageURL":"https://github.com/gnuion.png","key":"gnuion"}],"frontMatter":{"slug":"scaffolding-react-app","title":"Scaffolding React App","authors":["gnuion"],"tags":["web"]},"prevItem":{"title":"Virtualization with QEMU","permalink":"/docion/blog/virtualization-with-qemu"},"nextItem":{"title":"Welcome","permalink":"/docion/blog/welcome"}},"content":"React is a library it doesn\'t care about project structure. You have to manage it instead.\\n\\n\x3c!-- truncate --\x3e\\n\\nScaffolding using [vite](https://vitejs.dev/guide/):\\n\\n```bash\\npnpm create vite\\n```\\n\\nThen follow the prompts!\\n\\n:::tip\\nCheck out Awesome Vite for [community maintained templates](https://github.com/vitejs/awesome-vite#templates) that include other tools or target different frameworks. You can use a tool like [degit](https://github.com/Rich-Harris/degit) to scaffold your project with the [Vitamin](https://github.com/wtchnm/Vitamin) template.\\n\\n```\\nnpx degit wtchnm/Vitamin#main my-app\\ncd my-project\\n\\npnpm install\\npnpm run dev\\n```\\n\\n:::"},{"id":"welcome","metadata":{"permalink":"/docion/blog/welcome","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/docion/blog/tags/facebook"},{"label":"hello","permalink":"/docion/blog/tags/hello"},{"label":"docusaurus","permalink":"/docion/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"Scaffolding React App","permalink":"/docion/blog/scaffolding-react-app"},"nextItem":{"title":"MDX Blog Post","permalink":"/docion/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/docion/blog/mdx-blog-post","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/docion/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"Welcome","permalink":"/docion/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/docion/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/docion/blog/long-blog-post","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2019-05-29-long-blog-post.mdx","source":"@site/blog/2019-05-29-long-blog-post.mdx","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/docion/blog/tags/hello"},{"label":"docusaurus","permalink":"/docion/blog/tags/docusaurus"}],"readingTime":2.06,"hasTruncateMarker":true,"authors":[{"name":"Endilie Yacop Sucipto","title":"Maintainer of Docusaurus","url":"https://github.com/endiliey","imageURL":"https://github.com/endiliey.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"prevItem":{"title":"MDX Blog Post","permalink":"/docion/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/docion/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!-- truncate --\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/docion/blog/first-blog-post","editUrl":"https://github.com/gnuion/docion/tree/gh-edits/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/docion/blog/tags/hola"},{"label":"docusaurus","permalink":"/docion/blog/tags/docusaurus"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"],"hide_table_of_contents":false},"prevItem":{"title":"Long Blog Post","permalink":"/docion/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);